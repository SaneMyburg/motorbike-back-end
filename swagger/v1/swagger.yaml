---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/motorbikes":
    get:
      summary: list motorbikes
      tags:
      - Motorbikes
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: text
                    price:
                      type: string
                    photo:
                      type: string
                    finance_fee:
                      type: decimal
                    total_amount_payable:
                      type: decimal
                    duration:
                      type: integer
                    user_id:
                      type: bigint
                  required:
                  - id
                  - name
                  - description
                  - price
                  - photo
                  - finance_fee
                  - total_amount_payable
                  - duration
                  - user_id
      description: List all motorbikes
    post:
      summary: Creates a motorbike
      tags:
      - Motorbikes
      parameters: []
      responses:
        '201':
          description: motorbike created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                photo:
                  type: string
                duration:
                  type: integer
                total_amount_payable:
                  type: number
                finance_fee:
                  type: number
                user_id:
                  type: integer
              required:
              - name
              - user_id
  "/api/v1/motorbikes/{id}":
    get:
      summary: Retrieves a specific motorbike
      tags:
      - Motorbikes
      parameters:
      - name: id
        in: path
        description: ID of the motorbike
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: motorbike found
        '404':
          description: motorbike not found
    delete:
      summary: Deletes a specific motorbike
      tags:
      - Motorbikes
      parameters:
      - name: id
        in: path
        description: ID of the motorbike
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: motorbike deleted
        '404':
          description: motorbike not found
  "/api/v1/reservations":
    get:
      summary: Retrieves all reservations
      tags:
      - Reservations
      responses:
        '200':
          description: reservations found
    post:
      summary: Creates a reservation
      tags:
      - Reservations
      parameters: []
      responses:
        '201':
          description: reservation created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: date
                city:
                  type: string
                user_id:
                  type: integer
                motorbike_id:
                  type: integer
              required:
              - date
              - city
              - user_id
              - motorbike_id
  "/api/v1/users":
    post:
      summary: new_session user
      parameters: []
      responses:
        '201':
          description: user created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
